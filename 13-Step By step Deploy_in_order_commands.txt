


## ✅ Use Paid TLS Certificate in Kubernetes (No cert-manager Needed)

If you've purchased a TLS certificate** from a provider (like GoDaddy, DigiCert, etc.) and received a `.crt` and `.key` file, you do not need 
ert-manager or Let's Encrypt**. You can manually configure TLS in your Kubernetes project.

---

### 🔧 Step 1: Get Your TLS Certificate Files

Your certificate provider will give you:

 `tls.crt` → Public TLS certificate
 `tls.key` → Private TLS key

Optional:

 `ca.crt` → Intermediate/Root CA certificate (used in some cases, not required for `kubernetes.io/tls` type)

---

### 📦 Step 2: Create a Kubernetes TLS Secret

If you have `tls.crt` and `tls.key` locally, use this command:


kubectl create secret tls mongo-tls-secret \
  --cert=path/to/tls.crt \
  --key=path/to/tls.key \
  -n mongo-stack


✅ This will:

* Automatically base64-encode the files
* Create a `kubernetes.io/tls`-type secret
* Avoid manual YAML editing mistakes



OR OR OR OR

### 🧾 (Optional) Manual YAML: If You Want to Hardcode It

If you'd rather write it manually, encode the files like this:


base64 -w 0 tls.crt
# Copy the output for tls.crt

base64 -w 0 tls.key
# Copy the output for tls.key

Yaml file name -->10-ingress.yaml



--------------------------------------------------------------------

 the NGINX Ingress Controller Pod, because it:

* Handles external traffic coming from Azure Load Balancer.
* Reads the Ingress resource you already defined.
* Routes traffic to backend services like `mongo-express`.

But it **won’t be functional** unless NGINX Ingress Controller pod and LoadBalancer service exist in your cluster.


## ✅ 𝗛𝗼𝘄 𝘁𝗼 𝗗𝗲𝗽𝗹𝗼𝘆 𝗡𝗚𝗜𝗡𝗫 𝗜𝗻𝗴𝗿𝗲𝘀𝘀 𝗖𝗼𝗻𝘁𝗿𝗼𝗹𝗹𝗲𝗿 (with Azure LoadBalancer)

Run the following to install:

kubectl create namespace ingress-nginx


When you apply:
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/cloud/deploy.yaml

It creates the **entire setup** needed for Ingress on cloud platforms (like Azure):


### ✅ **What’s created automatically:**

📍 In **Namespace `ingress-nginx`**:

| Resource Type    | Name                         | Description                                |
| ---------------- | ---------------------------- | ------------------------------------------ |
| `Deployment`     | `ingress-nginx-controller`   | Runs the NGINX Ingress Controller pod      |
| `Pod`            | `ingress-nginx-controller-*` | The controller pod itself                  |
| `ServiceAccount` | `ingress-nginx`              | For controller to access cluster resources |
| `ClusterRole`    | `ingress-nginx`              | RBAC permissions                           |
| `Service`        | `ingress-nginx-controller`   | **Type: LoadBalancer → gets external IP**  |
| `ConfigMap`      | `ingress-nginx-controller`   | Custom NGINX behavior                      |

---

### ✅ **Check external IP:**

Run this after a few seconds:


kubectl get svc -n ingress-nginx


You’ll see something like:

NAME                       TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                      AGE
ingress-nginx-controller   LoadBalancer   10.0.120.234    52.170.5.23     80:31320/TCP, 443:32291/TCP  1m


⏳ It may take 30–90 seconds to assign the external IP on Azure.

---

### 🔗 Then update your DNS:

Point:
mongo.yourdomain.com → 52.170.5.23


---

### 🔄 Now, your setup is complete:

User → Azure Public LB → Ingress Controller → `/mongo-express` → `mongo-express` Pod


## ✅ Check Load Balancer IP


kubectl get svc -n ingress-nginx


Output:

NAME                       TYPE           EXTERNAL-IP     PORT(S)
ingress-nginx-controller   LoadBalancer   52.X.X.X        80:xxxx/TCP, 443:xxxx/TCP


That `EXTERNAL-IP` is your **Azure Public Load Balancer IP**.



## ✅ Configure DNS for your domain

Point your domain to this LB IP:


mongo.yourdomain.com  →  52.X.X.X



-------------------------------------------------------------------------------------------------------------------
Static IP  for Ingress   service LB

az network public-ip create \
  --resource-group <NODE_RESOURCE_GROUP> \
  --name myStaticPublicIP \
  --sku Standard \
  --allocation-method static

Inject  that  static  IP
helm upgrade --install ingress-nginx ingress-nginx \
  --repo https://kubernetes.github.io/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.loadBalancerIP=<STATIC_IP>




kubectl create namespace ingress-nginx
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/cloud/deploy.yaml

kubectl apply -f manifests/01-namespace.yaml
kubectl apply -f manifests/02-mongodb-secret.yaml
kubectl apply -f manifest/02-mongo-tls-secret
kubectl apply -f manifests/03-configmap.yaml
kubectl apply -f manifests/04-storageclass.yaml  # Optional on cloud
kubectl apply -f manifests/05-mongodb-statefulset.yaml
kubectl apply -f manifests/06-mongodb-headless-service.yaml
kubectl apply -f manifests/07-mongodb-clusterip-service.yaml
kubectl apply -f manifests/08-mongo-express-deployment.yaml
kubectl apply -f manifests/09-mongo-express-service.yaml
kubectl apply -f manifests/10-ingress.yaml
kubectl apply -f manifests/11-replica-init-job.yaml
kubectl apply -f manifests/12-network-policy.yaml


